name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'

jobs:
  # ============================================================================
  # Code Quality Checks
  # ============================================================================
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run flake8
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Check code formatting with black
        run: |
          cd backend
          black --check --diff .
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          cd backend
          isort --check-only --diff .
        continue-on-error: true

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check (dependency vulnerabilities)
        run: |
          cd backend
          pip install -r requirements.txt
          safety check --json || true
        continue-on-error: true

      - name: Run bandit (code security issues)
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll
        continue-on-error: true

  # ============================================================================
  # Backend Tests with PostgreSQL
  # ============================================================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_nexus_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_nexus_db
      SECRET_KEY: test-secret-key-for-ci-cd-testing-only-not-for-production-use
      ENVIRONMENT: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        run: |
          cd backend
          alembic upgrade head

      - name: Run tests with coverage
        run: |
          cd backend
          pytest tests/ -v \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit.xml \
            -m "not slow" \
            || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/junit.xml
            backend/htmlcov/
          retention-days: 30

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: backend/htmlcov/
          retention-days: 30

  # ============================================================================
  # Frontend Tests (if applicable)
  # ============================================================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint || true
        continue-on-error: true

      - name: Run tests
        run: |
          cd frontend
          npm run test || echo "No frontend tests configured yet"
        continue-on-error: true

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # ============================================================================
  # Docker Build
  # ============================================================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: nexus-analyzer-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: nexus-analyzer-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # Integration Tests (Full Stack)
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          # Database
          POSTGRES_USER=nexus_user
          POSTGRES_PASSWORD=nexus_password
          POSTGRES_DB=nexus_db
          DATABASE_URL=postgresql://nexus_user:nexus_password@db:5432/nexus_db

          # Security
          SECRET_KEY=test-secret-key-for-ci-cd-integration-testing-only
          ENVIRONMENT=test

          # API
          CORS_ORIGINS=http://localhost:3000
          EOF

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          sleep 10

      - name: Wait for services to be healthy
        run: |
          timeout 60 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 2; done' || true

      - name: Check service status
        run: |
          docker compose ps
          docker compose logs backend

      - name: Run integration tests
        run: |
          docker compose exec -T backend pytest tests/ -v -m integration || true
        continue-on-error: true

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v

  # ============================================================================
  # Summary
  # ============================================================================
  ci-success:
    name: CI Pipeline Complete
    runs-on: ubuntu-latest
    needs: [lint, security, test-backend, test-frontend, docker-build, integration-tests]
    if: always()

    steps:
      - name: Check CI status
        run: |
          echo "CI Pipeline completed"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
